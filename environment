##
# This /etc/environment file is sourced for each new shell.
# This file is autogenerated -- do not edit this file.
#
# This file sets the default PATH, load paths, language, history,
# and application-specific variables for Go, Java, Ruby, etc.
#
# To build this file, run environment-generate in the directory above.
#
##

##########################################################################

# Paths for Unix typical bin & sbin
#
#      /usr/local/bin,sbin
#      /usr/bin,sbin
#      /bin,sbin
#
PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin

##########################################################################

# Paths for current versions of software in /opt/* directory.
# We want the /opt versions to supercede any base system versions.
# We create an OPT variable to make it easy to set or unset these.

OPT=

##########################################################################

# Library Settings
#
# You can specify the full pathname of the library,
# or use the `-LLIBDIR' flag during linking and do
# at least one of the following:
#
#   * add LIBDIR to the `LD_LIBRARY_PATH' environment variable during execution
#   * add LIBDIR to the `LD_RUN_PATH' environment variable during linking
#   * use the `-Wl,--rpath -Wl,LIBDIR' linker flag
#   * have your system administrator add LIBDIR to `/etc/ld.so.conf'
#
# We include all of them we use in all the settings we've encountered;
# you may want to tune this for your particular system or need.
#
# From http://www.eyrie.org/~eagle/notes/rpath.html
#
# Here's a brief primer on the way that this works on Solaris and Linux.
# The search paths for libraries come from three sources:
#
#   * the environment variable LD_LIBRARY_PATH (if set)
#   * any rpath encoded in the binary (more on this later)
#   * the system default search paths.
#
# The sources are searched in this order, and the first matching library is used.
#
# From http://www.netbsd.org/docs/pkgsrc/configuring.html
#
# If you want to pass flags to the linker, both in the configure step and the build step,
# you can do this in two ways: either set LDFLAGS or LIBS. The difference between the two
# is that LIBS will be appended to the command line, while LDFLAGS come earlier.
#
# From http://xahlee.org/UnixResource_dir/_/ldpath.html
#
# Some good examples of how LD_LIBRARY_PATH is used:
#
#   * When upgrading shared libraries, you can test out a library before replacing it.
#     In a similar vein, in case your upgrade program depends on shared libraries and
#     may freak out if you replace a shared library out from under it, you can use
#     LD_LIBRARY_PATH to point to a directory with copy of a shared libraries and
#     then you can replace the system copy without worry. You can even undo things
#     should things fail by moving the copy back.
#
#   * X11 uses LD_LIBRARY_PATH during its build process. X11 distributes its fonts
#     in “bdf” format, and during the build process it needs to “compile” the bdf
#     files into “pcf” files. LD_LIBRARY_PATH is used to point the the build lib
#     directory so it can run bdftopcf during the build stage before the shared
#     libraries are installed.
#
#   * Perl can be installed with most of its core code as a shared library.
#     This is handy if you embed Perl in other programs -- you can compile them
#     so they use the shared library and so you'll save memory at run time.
#     However Perl uses Perl scripts at various points in the build and install.
#     The 'perl' binary won't run until its shared libraries are installed,
#     unless LD_LIBRARY_PATH is used to bootstrap the process.

LD_LIBRARY_PATH="/usr/lib32"
LD_RUN_PATH=
LDFLAGS=

##########################################################################

# C++ compiler flags

CPPFLAGS=

##########################################################################

# Manual pages

MANPATH=/usr/local/man

##########################################################################

PKG_CONFIG_PATH=/usr/local/lib/pkgconfig

##########################################################################

# Amazon-related

EC2_HOME=/opt/ec2-api-tools/current

##########################################################################

# Android

ANDROID_HOME="/opt/android-sdk"
PATH="$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools"

ANDROID_NDK_HOME="/usr/local/share/android-ndk"

##########################################################################

# Amazon Web Services

OPT=$OPT:/opt/ec2-api-tools/current/bin

##########################################################################

# Cassandra database

CASSANDRA_HOME=~/cassandra
PATH="$PATH:$CASSANDRA_HOME/bin"

##########################################################################

# Elixir

PATH="$PATH:/opt/elixir/current/bin"

##########################################################################

# Emacs

OPT="$OPT:/opt/emacs/current/bin"

##########################################################################

export FINDER="rg"

##########################################################################

# Games, in the typical Linux setup

PATH=$PATH:/usr/games

##########################################################################

# GCC

OPT="$OPT:/opt/gcc/current/bin"

##########################################################################

# Git mainline to have up-to-date git scripts.
# Feel free to move it somewhere better for you.

export GIT="git"
PATH="$PATH:/home/sources/git/mainline/bin"

##########################################################################

# GMP: GNU Multiple Precision Arithmetic Library

LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/opt/gmp/current/lib"
LD_RUN_PATH="$LD_RUN_PATH:/opt/gmp/current/lib"
LDFLAGS="$LDFLAGS -L/opt/gmp/current/lib"

##########################################################################

# Go programming language

# The GOPATH environment variable specifies the location of your workspace.
# It is likely the only variable you'll need to set when developing Go code.
#
# GOPATH may be set to a colon-separated list of paths inside which
# Go code, package objects, and executables may be found.
#
# Set a GOPATH to use goinstall to build and install your own code and
# external libraries outside of the Go tree (and to avoid writing Makefiles).
#
# $GOPATH must not overlap with $GOROOT, because `go install` looks in
# both GOROOT and GOPATH for imports like `fmt` and `os`, and gets confused.
#
# To verify GOPATH, use `go env`.
#
# Example:
#
#     $ mkdir $HOME/go
#     $ export GOPATH=$HOME/go
#
# For convenience, add the workspace's bin subdirectory to your PATH:
#
#     $ export PATH=$PATH:$GOPATH/bin
#
# For convenience On OS X or Linux, adding the following expression
# to your PATH will add all $GOPATH/bin directories:
#
#     ${GOPATH//://bin:}/bin
#
# Our system's users may want to set their own GOPATH, to override this one.
#
GOPATH=$HOME/go
export PATH=$PATH:${GOPATH//://bin:}/bin

# The GOROOT environment variable is the root of the Go tree.
# Typically we don't set this for any current Go setup.
#
# See "You Don't Need To Set GOROOT, Really":
# http://dave.cheney.net/2013/06/14/you-dont-need-to-set-goroot-really
#
# When you compile Go from source, the value of $GOROOT is automatically
# discovered (it is one directory up from the all.bash script) and then
# embedded into the go tool that is built from that source tree.
# You can see this by running `go env GOROOT`.
#
# Example with typical OSX Homebrew installation:
#
#     $ go env GOROOT
#     /usr/local/Cellar/go/1.4.2/libexec
#
# If you are a Java user, $GOROOT is similar in effect to $JAVA_HOME.
#
# If you choose not to set $GOROOT, you must run gomake instead of make or
# gmake when developing Go programs using the conventional makefiles.
#
# There are cases that where you may have to set $GOROOT.
#
#  * You are a Linux, FreeBSD or OS X user using the the zip or tarball
#    binary downloads from the golang.org website. These binaries have
#    a $GOROOT value of /usr/local/go and recommend you unpack them into
#    that location. If you choose not to do this, then you must set $GOROOT
#    to the location you chose.
#
#  * You are a Windows user using the zip binary download from golang.org.
#    These binaries have a $GOROOT value of C:\Go. If you place Go somewhere
#   else on your system then you must set $GOROOT to the location you chose.
#
#  * A default OSX homebrew setup will install go in /usr/local/Cellar/go/.
#    The export path is GOROOT=/usr/local/Cellar/go/{version} and
#    then also use export PATH=$PATH:$GOROOT/bin.
#
#GOROOT=/opt/go/current
#export PATH=$PATH:$GOROOT/bin

# Go binary directory
#
# N.b. Typically don't set GOBIN as it's not useful for 99% of cases.
# If the GOBIN environment variable is set, commands are installed to the
# directory it names instead of DIR/bin. In other words, it's useful if
# you want to (perhaps) set a universal, system-wide location for
# installed Go binaries/programs. In most cases, you do not.
#
#GOBIN=/opt/go/current/bin
#export PATH=$PATH:$GOBIN

##########################################################################

# Gracenote API scripts

OPT=$OPT:/opt/gracenote_api_scripts

##########################################################################

# Groovy langauge

GROOVY_HOME=/usr/local/opt/groovy/libexec

##########################################################################

# History in the shell

HISTFILESIZE=999999
HISTSIZE=9999
HISTTIMEFORMAT="%Y/%m/%d %T "

##########################################################################

# Java language

OPT="$OPT:/opt/java/jdk/current/bin"

JAVA_HOME=/opt/java/jdk/current/bin/java
JDK_HOME=/opt/java/jdk/current

##########################################################################

# JQ JSON processor

OPT="$OPT:/opt/jq"

##########################################################################

# JRuby Java Runtime

JRUBY_HOME=/opt/jruby/current

# Options:
#
#   * --1.9: run in Ruby 1.9 mode (vs. older 1.8 or newer experimental 2.0)
#
# Options for the JVM:
#
#   * -J-Xms: the memory allocation pool starting size.
#
#   * -J-Xmx: the memory allocation pool maximum size.
#
#   * -J-XX:ThreadStackSize=2048 (a.k.a. -J-Xss2048k): increase the
#     available memory for the stack; default on many systems is 1024.
#
#   * -J-XX:+CMSClassUnloadingEnabled and -J-XX:+UseConcMarkSweepGC:
#     The JVM keeps classes forever; the classes stay in PermGen forever.
#     If you're running a Ruby script that defines classes at runtime,
#     and on a server, the result is a memory that is never reclaimed.
#     Enable CMSClassUnloadingEnabled and UseConcMarkSweepGC to tell
#     the GC to sweep PermGen to remove classes which are no longer used.
#     Thanks to Aaron Digulla on StackOverflow for this explanation.
#
#   * -J-XX:+TieredCompilation and -J-XX:TieredStopAtLevel=1:
#     Tiered compilation, introduced in Java SE 7, brings client startup
#     speeds to the server VM. Normally, a server VM uses the interpreter
#     to collect profiling information about methods that is fed into the
#     compiler. In the tiered scheme, in addition to the interpreter,
#     the client compiler is used to generate compiled versions of methods
#     that collect profiling information about themselves.
#
# Options for Java 7 and earlier:
#
#   * -J-XX:MaxPermSize=256m: retired and ignored in Java 8.
#
#   * -Xcompile.invokedynamic=true: improve JRuby's performance on VMs
#    that support it; this is the default when running on OpenJDK 8 builds.
#    Java 7 brings with it an important new feature called invokedynamic,
#    which greatly improves JRuby's performance on VMs that support it.
#    However, current released versions of OpenJDK 7 sometimes error out or
#    fail to optimize code as well as they should. The use of invokedynamic
#    is off by default on Java 7, and on by default on Java 8.
#
# Options that we don't use here yet do use for faster testing:
#
#   * -J-noverify: Do not verify bytecodes
#
#   * -Xcompile.mode=OFF: Do not use Just In-Time Compilation.
#
JRUBY_OPTS="--1.9 -J-Xms1024m -J-Xmx1024m -J-XX:ThreadStackSize=2048 -J-XX:+CMSClassUnloadingEnabled -J-XX:+UseConcMarkSweepGC -J-XX:+TieredCompilation -J-XX:TieredStopAtLevel=1"

JRUBY_LD_LIBRARY_PATH="/opt/jruby/current/lib"
JRUBY_LD_RUN_PATH="/opt/jruby/current/lib"
JRUBY_LDFLAGS="-L/opt/jruby/current/lib"

# Append
LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$JRUBY_LD_LIBRARY_PATH"
LD_RUN_PATH="$LD_RUN_PATH:$JRUBY_LD_RUN_PATH"
LDFLAGS="$LDFLAGS $JRUBY_LDFLAGS"

##########################################################################

export JUMPER="cd ~/.jump/"

##########################################################################

# Language & Collation

LANG=en_US.UTF-8
LANGUAGE=en_US.UTF-8
LC_CTYPE=en_US.UTF-8
LC_ALL=en_US.UTF-8

##########################################################################

# lapack
#
# If you use macOS and use brew, then your lapack
# is likely to be installed in a way that needs these:
#
#    LDFLAGS: -L/usr/local/opt/lapack/lib
#    CPPFLAGS: -I/usr/local/opt/lapack/include
#    PKG_CONFIG_PATH: /usr/local/opt/lapack/lib/pkgconfig
#
# If you use cross-platform lapack and cross-platform /etc/environment,
# such as macOS with brew, and Linux, and this specific environment file,
# then you will likely want to normalize the installation locations;
# link the macOS location to our naming-convention location like this:
#
#     mkdir /opt/lapack
#     ln -s /usr/local/opt/lapack /opt/lapack/current

X="/opt/lapack/current"

LAPACK_BIN="$X/bin"
LAPACK_CPPFLAGS="-I$X/include"
LAPACK_LDFLAGS="-L/$X/lib"
LAPACK_PKG_CONFIG_PATH="$X/lib/pkgconfig"

OPT="$OPT:$LAPACK_BIN"
CPPFLAGS="$CPPFLAGS $LAPACK_CPPFLAGS"
LDFLAGS="$LDFLAGS $LAPACK_LDFLAGS"
PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$LAPACK_PKG_CONFIG_PATH"

##########################################################################

# libpcap
#
# If you use macOS and use brew, then your libpcap
# is likely to be installed in a way that needs these:
#
#    LDFLAGS: -L/usr/local/opt/libpcap/lib
#    CPPFLAGS: -I/usr/local/opt/libpcap/include
#
# If you use cross-platform libpcap and cross-platform /etc/environment,
# such as macOS with brew, and Linux, and this specific environment file,
# then you will likely want to normalize the installation locations;
# link the macOS location to our naming-convention location like this:
#
#     mkdir /opt/libpcap
#     ln -s /usr/local/opt/libpcap /opt/libpcap/current

X="/opt/libpcap/current"

LIBPCAP_CPPFLAGS="-I$X/include"
LIBPCAP_LDFLAGS="-L$X/lib"

CPPFLAGS="$CPPFLAGS $LIBPCAP_CPPFLAGS"
LDFLAGS="$LDFLAGS $LIBPCAP_LDFLAGS"

##########################################################################

# libxslt
#
# If you use macOS and use brew, then your libxslt
# is likely to be installed in a way that needs these:
#
#    LDFLAGS: -L/usr/local/opt/libxslt/lib
#    CPPFLAGS: -I/usr/local/opt/libxslt/include
#    PKG_CONFIG_PATH: /usr/local/opt/libxslt/lib/pkgconfig
#
# If you use cross-platform libxslt and cross-platform /etc/environment,
# such as macOS with brew, and Linux, and this specific environment file,
# then you will likely want to normalize the installation locations;
# link the macOS location to our naming-convention location like this:
#
#     mkdir /opt/libxslt
#     ln -s /usr/local/opt/libxslt /opt/libxslt/current

X="/opt/libxslt/current"

LIBXSLT_CPPFLAGS="-I$X/include"
LIBXSLT_LDFLAGS="-L$X/lib"
LIBXSLT_PKG_CONFIG_PATH="$X/lib/pkgconfig"

CPPFLAGS="$CPPFLAGS $LIBXSLT_CPPFLAGS"
LDFLAGS="$LDFLAGS $LIBXSLT_LDFLAGS"
PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$LIBXSLT_PKG_CONFIG_PATH"

##########################################################################

# LLVM compiler

LLVM_MODULES="core jit native"
LLVM_LDFLAGS="-L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib"
LLVM_CPPFLAGS="-I/usr/local/opt/llvm/include"

# Append
CPPFLAGS="$CPPFLAGS $LLVM_CPPFLAGS"
LDFLAGS="$LDFLAGS $LLVM_LDFLAGS"

##########################################################################

# Nagios monitoring software

PATH="$PATH:/usr/lib/nagios/plugins"

##########################################################################

# ncurses
#
# If you use macOS and use brew, then your ncurses
# is likely to be installed in a way that needs these:
#
#    LDFLAGS: -L/usr/local/opt/ncurses/lib
#    CPPFLAGS: -I/usr/local/opt/ncurses/include
#    PKG_CONFIG_PATH: /usr/local/opt/ncurses/lib/pkgconfig
#
# If you use cross-platform ncurses and cross-platform /etc/environment,
# such as macOS with brew, and Linux, and this specific environment file,
# then you will likely want to normalize the installation locations;
# link the macOS location to our naming-convention location like this:
#
#     mkdir /opt/ncurses
#     ln -s /usr/local/opt/ncurses /opt/ncurses/current

X="/opt/ncurses/current"

NCURSES_CPPFLAGS="-I$X/include"
NCURSES_LDFLAGS="-L$X/lib"
NCURSES_PKG_CONFIG_PATH="$X/lib/pkgconfig"

CPPFLAGS="$CPPFLAGS $NCURSES_CPPFLAGS"
LDFLAGS="$LDFLAGS $NCURSES_LDFLAGS"
PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$NCURSES_PKG_CONFIG_PATH"

##########################################################################

# net-snmp
#
# If you use macOS and use brew, then your net-snmp
# is likely to be installed in a way that needs these:
#
#    LDFLAGS: -L/usr/local/opt/net-snmp/lib
#    CPPFLAGS: -I/usr/local/opt/net-snmp/include
#
# If you use cross-platform net-snmp and cross-platform /etc/environment,
# such as macOS with brew, and Linux, and this specific environment file,
# then you will likely want to normalize the installation locations;
# link the macOS location to our naming-convention location like this:
#
#     mkdir /opt/net-snmp
#     ln -s /usr/local/opt/net-snmp /opt/net-snmp/current

X="/opt/net-snmp/current"

NET_SNMP_CPPFLAGS="-I$X/include"
NET_SNMP_LDFLAGS="-L$X/lib"

CPPFLAGS="$CPPFLAGS $NET_SNMP_CPPFLAGS"
LDFLAGS="$LDFLAGS $NET_SNMP_LDFLAGS"

##########################################################################

# Node JS

OPT="$OPT:/opt/node/current/bin"

##########################################################################

# openldap
#
# If you use macOS and use brew, then your openldap
# is likely to be installed in a way that needs these:
#
#    LDFLAGS: -L/usr/local/opt/openldap/lib
#    CPPFLAGS: -I/usr/local/opt/openldap/include
#
# If you use cross-platform openldap and cross-platform /etc/environment,
# such as macOS with brew, and Linux, and this specific environment file,
# then you will likely want to normalize the installation locations;
# link the macOS location to our naming-convention location like this:
#
#     mkdir /opt/openldap
#     ln -s /usr/local/opt/openldap /opt/openldap/current

X="/opt/openldap/current"

OPENLDAP_CPPFLAGS="-I$X/include"
OPENLDAP_LDFLAGS="-L$X/lib"

CPPFLAGS="$CPPFLAGS $OPENLDAP_CPPFLAGS"
LDFLAGS="$LDFLAGS $OPENLDAP_LDFLAGS"

##########################################################################

# Oracle-related

ORACLE_HOME=/opt/oracle/instantclient
NLS_LANG=AMERICAN_AMERICA.UTF8
DYLD_LIBRARY_PATH=$ORACLE_HOME

##########################################################################

# Packer

OPT="$OPT:/opt/packer"

##########################################################################

# Postgresql

LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/pgsql/lib"
LD_RUN_PATH="$LD_RUN_PATH:/usr/local/pgsql/lib"
LDFLAGS="-L/usr/local/pgsql/lib $LDFLAGS"

##########################################################################

# Postgres.app database on OSX

PATH="$PATH:/Applications/Postgres.app/Contents/Versions/9.4/bin"

##########################################################################

# Postgres database

PATH="$PATH:/usr/local/pgsql/bin"
MANPATH="$MANPATH:/usr/local/pgsql/man"

##########################################################################

PYTHONIOENCODING=utf8

##########################################################################

# qt5
#
# If you use macOS and use brew, then your qt5
# is likely to be installed in a way that needs these:
#
#    LDFLAGS: -L/usr/local/opt/qt5/lib
#    CPPFLAGS: -I/usr/local/opt/qt5/include
#
# If you use cross-platform qt5 and cross-platform /etc/environment,
# such as macOS with brew, and Linux, and this specific environment file,
# then you will likely want to normalize the installation locations;
# link the macOS location to our naming-convention location like this:
#
#     mkdir /opt/qt5
#     ln -s /usr/local/opt/qt5 /opt/qt5/current

X="/opt/qt5/current"

QT5_CPPFLAGS="-I$X/include"
QT5_LDFLAGS="-L$X/lib"
QT5_PKG_CONFIG_PATH="$X/lib/pkgconfig"

CPPFLAGS="$CPPFLAGS $QT5_CPPFLAGS"
LDFLAGS="$LDFLAGS $QT5_LDFLAGS"
PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$QT5_PKG_CONFIG_PATH"

##########################################################################

# RBENV is the Ruby Environment manager -- deprecated for us

RBENV_ROOT=~/.rbenv

##########################################################################

# Redis database

OPT=$OPT:/opt/redis/current/bin

##########################################################################

# Ruby language

# We put our Ruby in /opt because we want it to be system-wide.
# We have multiple Ruby virtual machines and multiple verisons.
#
# Example:
#
#   /opt/ruby/2.6.3
#   /opt/jruby/9.1.17.0
#   /opt/rbx/3.103
#
# We link the preferred vm and version this way:
#
#   ln -sfn /opt/ruby/2.6.3 /opt/ruby/current
#
OPT="$OPT:/opt/ruby/current/bin"
OPT="$OPT:/opt/jruby/current/bin"
OPT="$OPT:/opt/rbx/current/bin"

##########################################################################

# RubyMine IDE, which runs on Java

OPT="$OPT:/opt/rubymine/current/bin"

RUBYMINE_JDK=/opt/jdk/current

##########################################################################

# SBT

OPT="$OPT:/opt/sbt/current/bin"

##########################################################################

# SixArm.com repositories

OPT=$OPT:/opt/sixarm/airport-ssid
OPT=$OPT:/opt/sixarm/change-case/bin
OPT=$OPT:/opt/sixarm/column-tsv
OPT=$OPT:/opt/sixarm/gettimeofday-localtime
OPT=$OPT:/opt/sixarm/gitconfig
OPT=$OPT:/opt/sixarm/gpg-decrypt
OPT=$OPT:/opt/sixarm/gpg-encrypt
OPT=$OPT:/opt/sixarm/log-file-cleaning
OPT=$OPT:/opt/sixarm/pmset-scripts
OPT=$OPT:/opt/sixarm/port-to-process
OPT=$OPT:/opt/sixarm/rsync-mirror
OPT=$OPT:/opt/sixarm/ssh-keygen-pro
OPT=$OPT:/opt/sixarm/ssid-powerful
OPT=$OPT:/opt/sixarm/tmux-start
OPT=$OPT:/opt/sixarm/sixarm_apt_scripts
OPT=$OPT:/opt/sixarm/sixarm_aws_cli
OPT=$OPT:/opt/sixarm/sixarm_dpkg_builder
OPT=$OPT:/opt/sixarm/sixarm_dpkg_scripts
OPT=$OPT:/opt/sixarm/sixarm_gem_scripts
OPT=$OPT:/opt/sixarm/sixarm_git_scripts/bin
OPT=$OPT:/opt/sixarm/sixarm_html_scripts
OPT=$OPT:/opt/sixarm/sixarm_htx
OPT=$OPT:/opt/sixarm/sixarm_markdown_scripts
OPT=$OPT:/opt/sixarm/sixarm_mysql_scripts
OPT=$OPT:/opt/sixarm/sixarm_postgresql_scripts
OPT=$OPT:/opt/sixarm/sixarm_ruby_gem_scripts/bin
OPT=$OPT:/opt/sixarm/sixarm_ruby_gemforge/bin
OPT=$OPT:/opt/sixarm/sixarm_shell_random_scripts
OPT=$OPT:/opt/sixarm/sixarm_shell_statistics
OPT=$OPT:/opt/sixarm/sixarm_ssh_scripts
OPT=$OPT:/opt/sixarm/sixarm_strategem
OPT=$OPT:/opt/sixarm/sixarm_tmux_scripts
OPT=$OPT:/opt/sixarm/sixarm_unix_shell_scripts

##########################################################################

# SQLite database
#
# If you use macOS and use brew, then your sqlite
# is likely to be installed in a way that needs these:
#
#    LDFLAGS: -L/usr/local/opt/sqlite/lib
#    CPPFLAGS: -I/usr/local/opt/sqlite/include
#    PKG_CONFIG_PATH: /usr/local/opt/sqlite/lib/pkgconfig
#
# If you use cross-platform sqlite and cross-platform /etc/environment,
# such as macOS with brew, and Linux, and this specific environment file,
# then you will likely want to normalize the installation locations;
# link the macOS location to our naming-convention location like this:
#
#     mkdir /opt/sqlite
#     ln -s /usr/local/opt/sqlite /opt/sqlite/current

OPT="$OPT:/opt/sqlite/current/bin"

SQLITE_CPPFLAGS="-I/usr/local/opt/sqlite/include"
SQLITE_LD_LIBRARY_PATH="/opt/sqlite/current/lib"
SQLITE_LD_RUN_PATH="/opt/sqlite/current/lib"
SQLITE_LDFLAGS="-L/opt/sqlite/current/lib"
SQLITE_PKG_CONFIG_PATH="/usr/local/opt/sqlite/lib/pkgconfig"

CPPFLAGS="$CPPFLAGS $SQLITE_CPPFLAGS"
LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$SQLITE_LDFLAGS"
LD_RUN_PATH="$LD_RUN_PATH:$SQLITE_LD_RUN_PATH"
LDFLAGS="$LDFLAGS $SQLITE_LDFLAGS"
PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$SQLITE_PKG_CONFIG_PATH"

##########################################################################

# Sublime editor

OPT=$OPT:/opt/sublime/current

##########################################################################

# Subversion source code management

OPT="$OPT:/opt/subversion/current/bin"
LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/opt/subversion/current/lib"
LD_RUN_PATH="$LD_RUN_PATH:/opt/subversion/current/lib"
LDFLAGS="$LDFLAGS -L/opt/subversion/current/lib"

##########################################################################

# tcl-tk
#
# If you use macOS and use brew, then your tcl-tk
# is likely to be installed in a way that needs these:
#
#    LDFLAGS: -L/usr/local/opt/tcl-tk/lib
#    CPPFLAGS: -I/usr/local/opt/tcl-tk/include
#    PKG_CONFIG_PATH: /usr/local/opt/tcl-tk/lib/pkgconfig
#
# If you use cross-platform tcl-tk and cross-platform /etc/environment,
# such as macOS with brew, and Linux, and this specific environment file,
# then you will likely want to normalize the installation locations;
# link the macOS location to our naming-convention location like this:
#
#     mkdir /opt/tcl-tk
#     ln -s /usr/local/opt/tcl-tk /opt/tcl-tk/current

X="/opt/tcl-tk/current"

TCL_TK_BIN="$X/bin"
TCL_TK_CPPFLAGS="-I$X/include"
TCL_TK_LDFLAGS="-L/$X/lib"
TCL_TK_PKG_CONFIG_PATH="$X/lib/pkgconfig"

OPT="$OPT:$TCL_TK_BIN"
CPPFLAGS="$CPPFLAGS $TCL_TK_CPPFLAGS"
LDFLAGS="$LDFLAGS $TCL_TK_LDFLAGS"
PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$TCL_TK_PKG_CONFIG_PATH"

##########################################################################

# Set terminal to use 256 colors

TERM=xterm-256color

##########################################################################

# Terraform by Hasicorp

OPT=$OPT:/opt/terraform/bin

##########################################################################

# texinfo
#
# If you use macOS and use brew, then your texinfo
# is likely to be installed in a way that needs these:
#
#    LDFLAGS: -L/usr/local/opt/texinfo/lib
#
# If you use cross-platform texinfo and cross-platform /etc/environment,
# such as macOS with brew, and Linux, and this specific environment file,
# then you will likely want to normalize the installation locations;
# link the macOS location to our naming-convention location like this:
#
#     mkdir /opt/texinfo
#     ln -s /usr/local/opt/texinfo /opt/texinfo/current

X="/opt/texinfo/current"

TEXINFO_LDFLAGS="-L/$X/lib"

LDFLAGS="$LDFLAGS $TEXINFO_LDFLAGS"

##########################################################################

# UpdateCommand repositories

OPT=$OPT:/opt/updatecommand/update/bin

##########################################################################

PATH="$PATH:/var/root/.cargo/bin"

##########################################################################

# Vim editor

OPT=$OPT:/opt/vim/current/bin

##########################################################################

# X11 X Window System

OPT="$OPT:/opt/X11/bin"

##########################################################################

## 
# XDG Base Directory Specification
#
# The XDG Base Directory Specification is based on the following concepts:
# 
#   * $XDG_DATA_HOME
#   * $XDG_DATA_DIRS
#   * $XDG_CONFIG_HOME
#   * $XDG_CONFIG_DIRS
#   * $XDG_CACHE_HOME
#   * $XDG_RUNTIME_DIR
#
# Environment variables:
#
#   * $XDG_CONFIG_HOME defines the base directory relative to
#     which user-specific configuration files should be stored. 
#     Default: $HOME/.config
#
#   * $XDG_CONFIG_DIRS defines the preference-ordered set of
#     base directories to search for configuration files in 
#     addition to the $XDG_CONFIG_HOME base directory. 
#     Directories should be seperated with a colon ':'.
#     Default: /etc/xdg
#
#   * $XDG_DATA_HOME defines the base directory relative to
#     which user-specific data files should be stored. 
#     Default: $HOME/.local/share
#
#   * $XDG_DATA_DIRS defines the preference-ordered set of 
#     base directories to search for data files in addition 
#     to the $XDG_DATA_HOME base directory. 
#     Default: /usr/local/share/:/usr/share/
#
#   * $XDG_CACHE_HOME defines the base directory relative to
#     which user-specific non-essential data files should be stored.
#     Default: $HOME/.cache
#
#   * $XDG_RUNTIME_DIR defines the base directory relative to
#     which user-specific non-essential runtime files and other file
#     objects (such as sockets, named pipes, ...) should be stored.
#     The directory MUST be owned by the user and mode MUST be 0700.
#     Default: If $XDG_RUNTIME_DIR is not set applications should
#     fall back to a replacement directory with similar capabilities
#     and print a warning message.
#
# Path details:
#
#   * All paths set in these environment variables must be absolute.
#
#   * If an implementation encounters a relative path in any of these
#     variables it should consider the path invalid and ignore it.
#
#   * Paths must be separated with a colon ':'.
#
##

##########################################################################

# YAML: Yet Another Markup Language

LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/opt/yaml/current/lib"
LD_RUN_PATH="$LD_RUN_PATH:/opt/yaml/current/lib"
LDFLAGS="$LDFLAGS -L/opt/yaml/current/lib"

##########################################################################

# ZID generator 

OPT=$OPT:/opt/zidplan/zid-shell


##########################################################################

# Conclusion. Put any final steps here.

PATH="$OPT:$PATH"

OPT="/opt/ec2-api-tools/current/bin:/opt/emacs/current/bin:/opt/gcc/current/bin:/opt/gracenote_api_scripts:/opt/java/jdk/current/bin:/opt/jq:/opt/lapack/current/bin:/opt/node/current/bin:/opt/packer:/opt/redis/current/bin:/opt/ruby/current/bin:/opt/jruby/current/bin:/opt/rbx/current/bin:/opt/rubymine/current/bin:/opt/sbt/current/bin:/opt/sixarm/airport-ssid:/opt/sixarm/change-case/bin:/opt/sixarm/column-tsv:/opt/sixarm/gettimeofday-localtime:/opt/sixarm/gitconfig:/opt/sixarm/gpg-decrypt:/opt/sixarm/gpg-encrypt:/opt/sixarm/log-file-cleaning:/opt/sixarm/pmset-scripts:/opt/sixarm/port-to-process:/opt/sixarm/rsync-mirror:/opt/sixarm/ssh-keygen-pro:/opt/sixarm/ssid-powerful:/opt/sixarm/tmux-start:/opt/sixarm/sixarm_apt_scripts:/opt/sixarm/sixarm_aws_cli:/opt/sixarm/sixarm_dpkg_builder:/opt/sixarm/sixarm_dpkg_scripts:/opt/sixarm/sixarm_gem_scripts:/opt/sixarm/sixarm_git_scripts/bin:/opt/sixarm/sixarm_html_scripts:/opt/sixarm/sixarm_htx:/opt/sixarm/sixarm_markdown_scripts:/opt/sixarm/sixarm_mysql_scripts:/opt/sixarm/sixarm_postgresql_scripts:/opt/sixarm/sixarm_ruby_gem_scripts/bin:/opt/sixarm/sixarm_ruby_gemforge/bin:/opt/sixarm/sixarm_shell_random_scripts:/opt/sixarm/sixarm_shell_statistics:/opt/sixarm/sixarm_ssh_scripts:/opt/sixarm/sixarm_strategem:/opt/sixarm/sixarm_tmux_scripts:/opt/sixarm/sixarm_unix_shell_scripts:/opt/sqlite/current/bin:/opt/sublime/current:/opt/subversion/current/bin:/opt/tcl-tk/current/bin:/opt/terraform/bin:/opt/updatecommand/update/bin:/opt/vim/current/bin:/opt/X11/bin:/opt/zidplan/zid-shell"
PATH="/opt/ec2-api-tools/current/bin:/opt/emacs/current/bin:/opt/gcc/current/bin:/opt/gracenote_api_scripts:/opt/java/jdk/current/bin:/opt/jq:/opt/lapack/current/bin:/opt/node/current/bin:/opt/packer:/opt/redis/current/bin:/opt/ruby/current/bin:/opt/jruby/current/bin:/opt/rbx/current/bin:/opt/rubymine/current/bin:/opt/sbt/current/bin:/opt/sixarm/airport-ssid:/opt/sixarm/change-case/bin:/opt/sixarm/column-tsv:/opt/sixarm/gettimeofday-localtime:/opt/sixarm/gitconfig:/opt/sixarm/gpg-decrypt:/opt/sixarm/gpg-encrypt:/opt/sixarm/log-file-cleaning:/opt/sixarm/pmset-scripts:/opt/sixarm/port-to-process:/opt/sixarm/rsync-mirror:/opt/sixarm/ssh-keygen-pro:/opt/sixarm/ssid-powerful:/opt/sixarm/tmux-start:/opt/sixarm/sixarm_apt_scripts:/opt/sixarm/sixarm_aws_cli:/opt/sixarm/sixarm_dpkg_builder:/opt/sixarm/sixarm_dpkg_scripts:/opt/sixarm/sixarm_gem_scripts:/opt/sixarm/sixarm_git_scripts/bin:/opt/sixarm/sixarm_html_scripts:/opt/sixarm/sixarm_htx:/opt/sixarm/sixarm_markdown_scripts:/opt/sixarm/sixarm_mysql_scripts:/opt/sixarm/sixarm_postgresql_scripts:/opt/sixarm/sixarm_ruby_gem_scripts/bin:/opt/sixarm/sixarm_ruby_gemforge/bin:/opt/sixarm/sixarm_shell_random_scripts:/opt/sixarm/sixarm_shell_statistics:/opt/sixarm/sixarm_ssh_scripts:/opt/sixarm/sixarm_strategem:/opt/sixarm/sixarm_tmux_scripts:/opt/sixarm/sixarm_unix_shell_scripts:/opt/sqlite/current/bin:/opt/sublime/current:/opt/subversion/current/bin:/opt/tcl-tk/current/bin:/opt/terraform/bin:/opt/updatecommand/update/bin:/opt/vim/current/bin:/opt/X11/bin:/opt/zidplan/zid-shell:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/opt/android-sdk/tools:/opt/android-sdk/platform-tools:/Users/joel/cassandra/bin:/opt/elixir/current/bin:/usr/games:/home/sources/git/mainline/bin:/Users/joel/go/bin:/usr/lib/nagios/plugins:/Applications/Postgres.app/Contents/Versions/9.4/bin:/usr/local/pgsql/bin:/var/root/.cargo/bin"
MANPATH="/usr/local/man:/usr/local/pgsql/man"
LD_LIBRARY_PATH="/usr/lib32:/opt/gmp/current/lib:/opt/jruby/current/lib:/usr/local/pgsql/lib:-L/opt/sqlite/current/lib:/opt/subversion/current/lib:/opt/yaml/current/lib"
LD_RUN_PATH="/opt/gmp/current/lib:/opt/jruby/current/lib:/usr/local/pgsql/lib:/opt/sqlite/current/lib:/opt/subversion/current/lib:/opt/yaml/current/lib"
LDFLAGS="-L/usr/local/pgsql/lib  -L/opt/gmp/current/lib -L/opt/jruby/current/lib -L//opt/lapack/current/lib -L/opt/libpcap/current/lib -L/opt/libxslt/current/lib -L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib -L/opt/ncurses/current/lib -L/opt/net-snmp/current/lib -L/opt/openldap/current/lib -L/opt/qt5/current/lib -L/opt/sqlite/current/lib -L/opt/subversion/current/lib -L//opt/tcl-tk/current/lib -L//opt/texinfo/current/lib -L/opt/yaml/current/lib"
CPPFLAGS="-I/opt/lapack/current/include -I/opt/libpcap/current/include -I/opt/libxslt/current/include -I/usr/local/opt/llvm/include -I/opt/ncurses/current/include -I/opt/net-snmp/current/include -I/opt/openldap/current/include -I/opt/qt5/current/include -I/usr/local/opt/sqlite/include -I/opt/tcl-tk/current/include"
PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/opt/lapack/current/lib/pkgconfig:/opt/libxslt/current/lib/pkgconfig:/opt/ncurses/current/lib/pkgconfig:/opt/qt5/current/lib/pkgconfig:/usr/local/opt/sqlite/lib/pkgconfig:/opt/tcl-tk/current/lib/pkgconfig"
DYLD_LIBRARY_PATH="/opt/oracle/instantclient"

